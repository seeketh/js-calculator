{"version":3,"sources":["comps/config.js","comps/PowerBtn.js","comps/Display.js","comps/Key.js","comps/Keyboard.js","App.js","reportWebVitals.js","index.js"],"names":["INIT","STRING_INIT","ENTRY_MAX","ON","OFF","POWER_ON","POWER_OFF","DISPLAY_ON","DISPLAY_ON_HB","DISPLAY_OFF","ACTIVE_KEY","INACTIVE_KEY","ACTIVE_LONG_KEY","INACTIVE_LONG_KEY","ACTIVATED_HB_KEY","LONG_KEY","HB_KEY","ENTRY_MAX_MSG","KEYS","one","type","id","value","two","three","four","five","six","seven","eight","nine","zero","decimal","equals","add","subtract","divide","multiply","clear","brightness","ORDERED_KEY_NAMES","PowerBtn","props","className","status","onClick","onChangeStatus","Display","displayClass","useMemo","isHb","input","result","Key","handleKeyDown","bind","handleClick","checkHb","state","keyClass","keyData","document","addEventListener","this","isPowered","setState","removeEventListener","event","key","toUpperCase","console","log","onChangeHb","onKeyActivate","setTimeout","label","Component","Keyboard","keyboardKeys","map","keyName","onSetInput","App","useState","setIsPowered","setInput","highB","setHighB","data","answer","setAnswer","errorMsg","setErrorMsg","hasDecimal","useRef","iFormula","entryCount","hasAnswer","rmLeading","exp","replace","fixDashes","useEffect","current","compute","expression","Math","round","eval","toString","notify","message","handleInput","inputKey","test","cleanInput","match","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f75fedd9.chunk.js","sourcesContent":["// Constant variables\nexport const INIT = 0;\nexport const STRING_INIT = \"0\";\nexport const LONG = 1;\nexport const SHORT = 0;\nexport const ENTRY_MAX = 12;\nexport const ON = true;\nexport const OFF = false;\nexport const POWER_ON = \"power-switch-on\";\nexport const POWER_OFF = \"power-switch-off\";\nexport const DISPLAY_ON = \"active-display\";\nexport const DISPLAY_ON_HB = \"active-hb-display\"; // hb - high brightness\nexport const DISPLAY_OFF = \"inactive-display\";\nexport const ACTIVE_KEY = \"active-key\";\nexport const INACTIVE_KEY = \"inactive-key\";\nexport const ACTIVE_LONG_KEY = \"active-long-key\";\nexport const INACTIVE_LONG_KEY = \"inactive-long-key\";\nexport const ACTIVATED_HB_KEY = \"activated-hb-key\";\nexport const LONG_KEY = \"long-key\";\nexport const HB_KEY= \"B\";\nexport const ENTRY_MAX_MSG = \"MAXIMUM SIZE REACHED\";\nexport const FORMULA_MAX_MSG = \"MAXIMUM INPUT REACHED\";\nexport const KEYS = {\n    one: {type: 0, id: \"one\", value: \"1\"},\n    two: {type: 0, id: \"two\", value: \"2\"},\n    three: {type: 0, id: \"three\", value: \"3\"},\n    four: {type: 0, id: \"four\", value: \"4\"},\n    five: {type: 0, id: \"five\", value: \"5\"},\n    six: {type: 0, id: \"six\", value: \"6\"},\n    seven: {type: 0, id: \"seven\", value: \"7\"},\n    eight: {type: 0, id: \"eight\", value: \"8\"},\n    nine: {type: 0, id: \"nine\", value: \"9\"},\n    zero: {type: 0, id: \"zero\", value: \"0\"},\n    decimal: {type: 0, id: \"decimal\", value: \".\"},\n    equals: {type: 1, id: \"equals\", value: \"=\"},\n    add: {type: 0, id: \"add\", value: \"+\"},\n    subtract: {type: 0, id: \"subtract\", value: \"-\"},\n    divide: {type: 0, id: \"divide\", value: \"/\"},\n    multiply: {type: 0, id: \"multiply\", value: \"*\"},\n    clear: {type: 1, id: \"clear\", value: \"C\"},\n    brightness: {type: 0, id: \"brighness\", value: \"B\"}\n};\n// Ordered keyboard keys\nexport const ORDERED_KEY_NAMES = [\n    \"clear\",\n    \"brightness\",\n    \"multiply\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"divide\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"subtract\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n    \"add\",\n    \"zero\",\n    \"decimal\",\n    \"equals\"\n];\n","// Power button Component\nimport { POWER_ON, POWER_OFF, ON, OFF } from './config'; // Setup goodies..\nimport '../css/PowerBtn.scss'; // Styles\nimport { IoPowerSharp } from 'react-icons/io5'; // Ionicons\n\nfunction PowerBtn(props) {\n\n\n    return(\n        <div\n            className={(props.status) ? POWER_ON : POWER_OFF}\n            onClick={() => {(!props.status) ? props.onChangeStatus(ON) : props.onChangeStatus(OFF)}}\n        >\n            <IoPowerSharp />\n        </div>\n    );\n}\n\nexport { PowerBtn };","import { useMemo } from 'react';\nimport { DISPLAY_OFF, DISPLAY_ON, DISPLAY_ON_HB } from './config'; // CSS classess.\nimport '../css/Display.scss';\n\n\n// The calculator display.\nfunction Display(props) {\n\n    const displayClass = useMemo(() => {\n        return (props.status) ? // Whether the calculator is powered or not.\n            (props.isHb) ? DISPLAY_ON_HB // Whether the display high brightness is On or not.\n            : DISPLAY_ON\n        : DISPLAY_OFF;\n     }, [props.status, props.isHb]);\n\n    return(\n        <div className={displayClass}>\n            <div className=\"formula-display\">\n                {props.input}\n            </div>\n            <div className=\"result-display\" id=\"display\">\n                {props.result}\n            </div>\n        </div>\n    );\n}\n\nexport { Display };","\nimport { Component } from 'react';\nimport { ACTIVE_KEY, LONG_KEY, INACTIVE_KEY, INACTIVE_LONG_KEY, ACTIVE_LONG_KEY, HB_KEY, ACTIVATED_HB_KEY, ON, OFF } from './config';\nimport '../css/Key.scss';\nimport { IoSunnyOutline, IoSunnySharp } from 'react-icons/io5';\n\n// A Calculator Keyboard Key.\n\nexport class Key extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        this.checkHb = this.checkHb.bind(this); // Check High brightness status.\n\n        this.state = {keyClass: (this.props.keyData.type) ? INACTIVE_LONG_KEY : INACTIVE_KEY}; // Styling class for the key.\n    }\n\n    // Expected props: key {id, value},  isPowered, onKeyActivate, isHb, onChangeHb\n\n    componentDidMount() {\n        document.addEventListener(\"keydown\", this.handleKeyDown);\n    }\n\n    componentDidUpdate() {\n        // Disable brightness indicator when the calculator is turned off (from an active high brightness state)\n        (this.checkHb() & !this.props.isPowered & !(this.state.keyClass === INACTIVE_KEY)) && this.setState({keyClass: INACTIVE_KEY});\n        //console.log(\"key component updated\");\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.handleKeyDown);\n    }\n\n    handleKeyDown(event) {\n        //console.log(\"received key\", event.key.toUpperCase());\n        if (this.props.keyData.value === event.key.toUpperCase()) {\n            this.handleClick();\n        }  \n    }\n\n    checkHb() {\n        return (this.props.keyData.value === HB_KEY);\n    }\n\n    handleClick() {\n        // Ignore any click or keypress if the calculator is not powered\n        console.log(\"combo\", this.props.keyData.value);\n        \n        if (this.props.isPowered) {\n            // Set CSS style based on key type and functionality\n            this.setState({\n                keyClass: (this.props.keyData.type) ? ACTIVE_LONG_KEY : ACTIVE_KEY\n            });\n\n            (this.checkHb() & this.props.isHb) ? this.props.onChangeHb(OFF)\n            : (this.checkHb() & !this.props.isHb) ? this.props.onChangeHb(ON)\n                : this.props.onKeyActivate(this.props.keyData.value); // It is not Hb key.\n\n            setTimeout(() => {\n                this.setState({\n                    keyClass: (this.props.keyData.type) ? INACTIVE_LONG_KEY\n                    : (this.checkHb() & this.props.isHb) ? ACTIVATED_HB_KEY : INACTIVE_KEY\n            })}, 100);\n        }\n    }\n\n    render() {\n        // Dermine key label\n        const label = (this.checkHb()) ? (this.props.isHb) ? <IoSunnySharp /> : <IoSunnyOutline />: this.props.keyData.value;\n\n        return (\n            <div className={this.props.keyData.type && LONG_KEY}>\n                <button\n                    className={this.state.keyClass}\n                    onClick={this.handleClick} \n                    id={this.props.keyData.id}\n                >\n                    {label}\n                </button>\n            </div>         \n        );\n    }\n\n}\n\n","import { useMemo } from 'react';\nimport { KEYS, ORDERED_KEY_NAMES } from './config';\nimport { Key } from './Key';\nimport '../css/Keyboard.scss';\n\n\n// The Calculator Keyboard.\n\nfunction Keyboard(props) {\n\n    // Create keys\n   const keyboardKeys = useMemo(() => {\n        return ORDERED_KEY_NAMES.map(keyName => {\n            //console.log(\"key names \", keyName);\n            return <Key keyData={KEYS[keyName]} key={keyName} isPowered={props.status} onKeyActivate={props.onSetInput} isHb={props.isHb} onChangeHb={props.onChangeHb} />;\n        });\n    }, [props.onSetInput, props.status, props.isHb, props.onChangeHb]);\n\n    return(\n        <div className=\"keyboard\">\n            {keyboardKeys}\n        </div>\n    );\n}\n\nexport { Keyboard };","import { ENTRY_MAX, ENTRY_MAX_MSG, INIT, OFF, STRING_INIT } from './comps/config'; // Setup goodies.\nimport { useEffect, useRef, useState } from 'react';\nimport './css/App.scss'; \nimport { Display, Keyboard, PowerBtn } from './comps'; // Calculator main components.\n\n//\n// This calculator takes in entire math expression as input, cleans it and evaluates it mathematical values.\n// It relies heavily on regular expression, and attempts to use 'eval' safely to compute the resulting values of an expression\n// It based on use cases details at:\n//  https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-javascript-calculator\n\nfunction App () {\n\n  const [isPowered, setIsPowered] = useState(false); // Wether or not the calculator is powered.\n  const [input, setInput] = useState(\"\"); // Input expression.\n  const [highB, setHighB] = useState(OFF); // Wheter or not to turn on disply's High Brightness.\n  const [answer, setAnswer] = useState({ data: \"\" }); // Resulting computational value - Set to object to force re-render when new value is the same as current one.\n  const [errorMsg, setErrorMsg] = useState(\"\"); // Calculator error message handle.\n\n  const hasDecimal = useRef(false);\n  const iFormula = useRef(\"\"); // Mathematical expression (without hard to track decimal points) for sanity checking.\n  const entryCount = useRef(INIT); // Given operand's length ( max is 12 integer).\n  const hasAnswer = useRef(false); // Whether or not a computation result has been found (calculated).\n  \n  // Reset calculator status on power change\n  useEffect(() => {\n    setInput(\"\");\n    !isPowered && setHighB(OFF);\n    !isPowered && (hasAnswer.current = false);\n    !isPowered && (hasDecimal.current = false);\n    !isPowered && (entryCount.current = INIT);\n    !isPowered && (iFormula.current = \"\");\n  }, [isPowered]);\n\n  // Removes leading zeros and unnecessary trailing operators\n  function rmLeading(exp) {\n    //return exp.replace(/^(0+)/, \"\").replace(/([-+*/])0+([1-9])/g, \"$1$2\");\n    return (exp\n      .replace(/^0+/, \"0\")\n      .replace(/^0+([1-9])/, \"$1\")\n      .replace(/([-+*/])0{2,}/g, \"$10\")\n      .replace(/[-+*/.]*$/, \"\")\n      .replace(/([-+*/])0+([1-9])/g, \"$1$2\")\n    );\n  }\n\n  // Removes leading -- and/or replaces -- with + elsewhere\n  function fixDashes(exp) {\n    return exp.replace(/^[-]{2}/, \"\").replace(/[-]{2}/, \"+\").replace(/[+][-]/, \"-\");\n  }\n\n  // Evaluates given expression and returns a value in string format\n  const compute = expression =>  (Math.round(1000000000000 * eval(rmLeading(expression))) / 1000000000000).toString();\n\n  const notify = (message) => {\n    setErrorMsg(message);\n    setTimeout(() => { setErrorMsg(\"\") }, 1000);\n  }\n\n  const handleInput = (inputKey) => {\n\n    if (/[C]/.test(inputKey.toUpperCase())) {\n      // All clear received\n      setInput(\"\");\n      setAnswer({ data: STRING_INIT });\n      hasAnswer.current = false;\n      hasDecimal.current = false;\n      entryCount.current = INIT;\n      iFormula.current = \"\";\n    } else if (/[=]/.test(inputKey) & (!hasAnswer.current)) {\n      // If '=' was pressed for a fresh answer.\n      if(/^[-]?\\d{1,12}[-+=*/][-]?\\d{1,12}([-+=*/][-]?\\d{1,12})*[-+*/]?$/.test(iFormula.current)) {\n        // if the internalized expression is in computable order\n        // Compute the answer\n        setAnswer({ data: compute(input.replace(/[\\D]$/, \"\")) }); // Removing trailing none decimal character.\n        hasAnswer.current = true;\n        iFormula.current = \"\";\n        hasDecimal.current = false;\n        entryCount.current = INIT;\n        setInput(rmLeading(input))\n      }\n    } else {\n        if (/[.]/.test(inputKey)) {\n            if (hasAnswer.current) {\n              setInput(STRING_INIT + inputKey);\n              hasAnswer.current = false;\n              hasDecimal.current = true;\n              entryCount.current = INIT;\n            } else if (entryCount.current === INIT & !hasDecimal.current) {\n              setInput(input + STRING_INIT + inputKey);\n              hasDecimal.current = true;\n            } else if (entryCount.current >= ENTRY_MAX) {\n              notify(ENTRY_MAX_MSG);\n            } else if (!hasDecimal.current) {\n              setInput(input + inputKey);\n              hasDecimal.current = true;\n            }\n        } else if (hasAnswer.current) {\n          console.log(\"close2 and has answer \", hasAnswer.current);\n          if (/[-+*/]/.test(inputKey)){\n            entryCount.current = INIT;\n            setInput(answer.data + inputKey);\n            iFormula.current = (answer.data + inputKey).replace(/[.]/g, \"\");\n            setAnswer({ data: STRING_INIT });\n            hasAnswer.current = false;\n            hasDecimal.current = false;\n          } else if (/[0-9]/.test(inputKey)) {\n            entryCount.current = 1;\n            iFormula.current = inputKey;\n            setInput(inputKey);\n            hasDecimal.current = false;\n            setAnswer({ data: STRING_INIT });\n            hasAnswer.current = false;\n          }\n        } else if (/[-]/.test(inputKey)) {\n          console.log(\"close3\");\n          entryCount.current = INIT;\n          // Remove -- at the start of expression/replace with + elsewhere, if any\n          iFormula.current = fixDashes(iFormula.current + inputKey);\n          setInput(fixDashes(input + inputKey));\n          entryCount.current = INIT;\n          hasAnswer.current = false;\n          hasDecimal.current = false;\n\n        } else if ((entryCount.current < ENTRY_MAX) & /[0-9]/.test(inputKey)) {\n          // Remove unnecessary trailing/leading zeros if any.\n          iFormula.current = rmLeading(iFormula.current + inputKey);\n          let cleanInput = rmLeading(input + inputKey); // Clean full expression\n          setInput(cleanInput);\n          entryCount.current = cleanInput.match(/(\\d*[.]*\\d*[.]*|\\d*)$/)[0].length; // Current entry's length - not the whole input expression.\n        } else if ((entryCount.current > INIT) & /[+*/]/.test(inputKey)) {\n          entryCount.current = INIT;\n          hasDecimal.current = OFF;\n          iFormula.current = iFormula.current + inputKey;\n          setInput(input + inputKey);\n        } else if ((entryCount.current === INIT) & /[+*/]/.test(inputKey)) {\n          // Allow the last input operator to overide pevious ones\n          iFormula.current = iFormula.current.replace(/[-+*/]+$/, inputKey);\n          setInput(input.replace(/[-+*/]+$/, inputKey));\n        }else if (entryCount.current >= ENTRY_MAX) {\n          notify(ENTRY_MAX_MSG);\n        }\n        //console.log(\"after all is done, we have answer?\", hasAnswer.current, \"count:\", entryCount.current);\n    }\n  } \n\n\n  return(\n    <div className=\"container\">\n        <div className=\"calculator\">\n          <PowerBtn status={isPowered} onChangeStatus={setIsPowered} />\n          <Display\n            status={isPowered}\n            input={input}\n            result={\n              (errorMsg) ? errorMsg \n              : (hasAnswer.current) ? answer.data \n              : (input === \"\" & isPowered) ? \"0\"\n              : isPowered && input.match(/([-+*/]|\\d*[.]*\\d*[.]*|\\d*)$/)[0]\n            }\n            isHb={highB} />\n          <Keyboard status={isPowered} onSetInput={handleInput} isHb={highB} onChangeHb={setHighB} />\n        </div>\n    </div>\n  );\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}